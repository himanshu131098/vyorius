{"version":3,"sources":["components/VyoMain.jsx","components/VyoNavbar.jsx","App.js","serviceWorker.js","index.js"],"names":["VyoMain","Jumbotron","fluid","class","className","Button","variant","size","href","VyoNavbar","Navbar","Brand","src","alt","Toggle","aria-controls","Collapse","id","Nav","Link","App","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAqBeA,MAhBf,WAEI,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,uBAAGC,MAAM,YAAT,+BACA,4BAAI,0BAAMC,UAAU,aAAhB,WAAJ,2BAAsE,0BAAMA,UAAU,aAAhB,YAAtE,uBAEA,qMACA,kBAACC,EAAA,EAAD,CAAQD,UAAU,SAASE,QAAQ,UAAUC,KAAK,MAAlD,eACA,kBAACF,EAAA,EAAD,CAAQD,UAAU,UAAUE,QAAQ,kBAAkBC,KAAK,MAA3D,cACA,uBAAGH,UAAU,UAAb,iBAAoC,uBAAGI,KAAK,wBAAuB,8C,eCgBhEC,MAzBf,WAEI,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAOC,MAAR,KACA,yBAAKR,MAAM,OAAOS,IAAI,+EAA+EC,IAAI,iBADzG,WAIA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBACpB,kBAACC,EAAA,EAAD,CAAKd,UAAU,WACf,kBAACc,EAAA,EAAIC,KAAL,CAAUX,KAAK,QAAf,gBACA,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,aAAf,YACA,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,aAAf,YACA,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,UAAf,aACA,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,SAAf,QACA,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,aAAf,YACA,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,YAAf,gBAGA,kBAACH,EAAA,EAAD,CAAQD,UAAU,UAAlB,oB,wBCAGgB,MAjBf,WAEE,OACE,6BACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWjB,UAAU,MAAMF,OAAK,GAC1B,kBAACoB,EAAA,EAAD,KACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACA,yBAAKnB,UAAU,SAASQ,IARjB,kDAQ8BC,IAAI,WAAWX,OAAK,SCN/CsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a88c7632.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"../App.css\";\r\n\r\nfunction VyoMain()\r\n{\r\n    return(\r\n        <Jumbotron fluid>\r\n            <p class=\"sub-head\">CONNECTING THE DISCONNECTED</p>\r\n            <h1><span className=\"highlight\">Vyorius</span> brings unmanned robots <span className=\"highlight\">together</span>,\r\n            wherever they are</h1>\r\n            <p>With all of the operations, commanding and maintenance tools in one place, unmanned vehicles will stay connected and productive no matter where youâ€™re operating.</p>\r\n            <Button className=\"tryBtn\" variant=\"primary\" size=\"lg\">Try Vyorius</Button>\r\n            <Button className=\"moreBtn\" variant=\"outline-primary\" size=\"lg\">Learn More</Button>\r\n            <p className=\"orderP\">Need to Order.<a href=\"https://vyorius.com/\"><u>Get Started</u></a></p>\r\n        </Jumbotron>\r\n        \r\n    )\r\n}\r\n\r\nexport default VyoMain;","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"../App.css\"\r\n\r\nfunction VyoNavbar()\r\n{\r\n    return(\r\n        <Navbar>\r\n            <Navbar.Brand >\r\n            <img class=\"logo\" src=\"https://i.pinimg.com/originals/f1/e0/c0/f1e0c0588382fa456e46b464c964e9ff.jpg\" alt=\"Logo-Vyorius\" />\r\n             VYORIUS\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#why\">Why Vyorius?</Nav.Link>\r\n            <Nav.Link href=\"#solution\">Solution</Nav.Link>\r\n            <Nav.Link href=\"#products\">Products</Nav.Link>\r\n            <Nav.Link href=\"#cases\">Use Cases</Nav.Link>\r\n            <Nav.Link href=\"#team\">Team</Nav.Link>\r\n            <Nav.Link href=\"#partners\">Partners</Nav.Link>\r\n            <Nav.Link href=\"#contact\">Contact-Us</Nav.Link> \r\n            </Nav>\r\n            </Navbar.Collapse>\r\n            <Button className=\"launch\">Launch Vyorius</Button>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default VyoNavbar;","import React from 'react';\nimport VyoMain from \"./components/VyoMain\";\nimport VyoNavbar from \"./components/VyoNavbar\"\nimport  Container  from 'react-bootstrap/Container';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport './App.css';\n\n\nfunction App() {\n  const imgUrl = \"https://vyorius.com/static/media/8.10880914.png\";\n  return (\n    <div>\n    <VyoNavbar/>\n    <Container className=\"top\" fluid>\n          <Row>\n          <VyoMain/>\n          <Col>\n          <img className=\"topImg\" src={imgUrl} alt=\"head-img\" fluid/>\n          </Col>\n          </Row>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}